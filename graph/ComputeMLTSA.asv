function B = ComputeMLTSA(data,Kmatrix,options)
N = size(data,1);  % m is the dimensionality of the input sample points.
ksize = options.ksize;
dim = options.dim;
% Step 0:  Neighborhood Index
NI = cell(1,N);

for i=1:N
    % Determine ki nearest neighbors of x_j
    indx00 = setdiff(1:N,i);
    [dist_sort,J] = sort(Kmatrix(i,indx00),'descend');
    Ii = indx00(J(1:ksize));
    NI{i} = Ii;
end;

% Step 1:  local information
BI = {};
for i=1:N
    % Compute the d largest right singular eigenvectors of the centered matrix
    Ii = NI{i}; 
    ki = ksize;
    Xi = data(Ii,:)-repmat(mean(data(Ii,:),1),[ki,1]);
    W = Xi*Xi'; 
    W = (W+W')/2;
    [Vi,Si] = schur(W);
    [s,Ji] = sort(diag(Si),'descend');
    if length(Ji)< dim
        dim = length(Ji);
    end
    Vi = Vi(:,Ji(1:dim));
    % construct Gi
    Gi = [repmat(1/sqrt(ki),[ki,1]) Vi];
    % compute the local orthogonal projection Bi = I-Gi*Gi'
    % that has the null space span([e,Theta_i^T]).
    BI{i} = eye(ki)-Gi*Gi';
end;
B = speye(N);
for i=1:N
    Ii = NI{i};
    B(Ii,Ii) = B(Ii,Ii)+BI{i};
    B(i,i) = B(i,i)-1;
end;
B = (B+B')/2;
B(isnan(B)) = 0;
B(isinf(B)) = 0;
Hn = eye(N) - ones(N,1)*ones